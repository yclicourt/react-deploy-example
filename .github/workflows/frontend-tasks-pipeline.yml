# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: React-Tasks-Application

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  ci:
  
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4
    
    - name: Install node
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        npm run build --if-present
  
    - name: Set up Docker Build to Image
      uses: docker/setup-buildx-action@v1

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: docker.io
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push to Registry
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: yoandevelop/frontend-tasks-react:${{ github.sha }}

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'yoandevelop/frontend-tasks-react:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
      
    # - name: SonarQube Scan
    #   uses: sonarsource/sonarqube-scan-action@master
    #   with:
    #     projectBaseDir: .
    #     args: >
    #       -D sonar.organization=yoadev-org
    #       -D sonar.projectKey=frontend-deploy-tasks
    #     env:
    #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  cd:
    runs-on: ubuntu-20.04
    needs: ci
    steps:
      - name: Start Minikube
        id: minikube
        uses: hiberbee/github-action-minikube@latest
        with:
          profile: github

      - name: Get Minikube status
        run: minikube status

      - name: Get cluster info
        run: kubectl cluster-info

      - name: Get Kubernetes pods
        run: kubectl get services --all-namespaces

      - name: Get Minikube IP
        run: echo ${{ steps.minikube.outputs.ip }}